# serialize key as PEM format from object
def serializeKey(key):
return key.public_bytes(encoding=serialization.Encoding.PEM,format=serialization.PublicFormat.SubjectPublicKeyInfo)

# load key object from given key in PEM format
def undoSerializeKey(key):
return serialization.load_pem_public_key(key,backend=default_backend())

# store a key in PEM format on a file on disk
# a password is required to store private key   
def storeKeyPEM(key,password,path=""):
if(not password):
    print("Error: Password is required to store private key")
    return -1
fname = 'private.pem'
pem = key.private_bytes(encoding=serialization.Encoding.PEM,format=serialization.PrivateFormat.PKCS8,encryption_algorithm=serialization.BestAvailableEncryption(password))
try:
    with open(path+"/"+fname,"w") as file:
        file.write(pem.decode())
except Exception as exc:
    print(exc)
    print("Error occurred while writing key on file")
    return -1

return 1

# load a private key from file
def loadKeyPEM(password=None,path=""):
    if(not password):
        print("Error: Password is required to store private key")
        return -1
    fname = 'private.pem'
    try:
        with open(path+"/"+fname, "rb") as key_file:
            key = serialization.load_pem_private_key(key_file.read(),password=password,backend=default_backend())
        key_file.close()        
    except Exception as exc:
        print(exc)
        return -1

    return key
    
# generate a new key pair value of assymetric keys (private,public)
def newRSAKeyPair():
	priv_key = rsa.generate_private_key(public_exponent=655537,key_size=2048,backend=default_backend())
	pub_key = priv_key.public_key()
	pub_key = pub_key.public_bytes(encoding=serialization.Encoding.PEM,format=serialization.PublicFormat.SubjectPublicKeyInfo)
	return (priv_key,pub_key)

# generate digest of data input using SHA256
def digestSHA256(data):
    digest = hashes.Hash(hashes.SHA256(), backend=default_backend())
    digest.update(data)
    hash =  digest.finalize()
    return hash

# encrypt value using RSA algorithm
def encryptRSA(pub_key, value):
	ciphertext = pub_key.encrypt(value,padding.OAEP(mgf=padding.MGF1(algorithm=hashes.SHA1()),algorithm=hashes.SHA1(),label=None))
	return base64.b64encode(ciphertext)

# decrypt ciphertext using RSA algorithm 
def decryptRSA(priv_key,ciphertext):
	value = priv_key.decrypt(base64.b64decode(ciphertext),padding.OAEP(mgf=padding.MGF1(algorithm=hashes.SHA1()), algorithm=hashes.SHA1(),label=None))
	return value

# AES encryption of data with key "key" and cipher mode CTR
def encryptAES(data, key, iv):
    cipher = Cipher(algorithms.AES(key), modes.CTR(iv), default_backend())
    encryptor = cipher.encryptor()
    encData = encryptor.update(data) + encryptor.finalize()
    return encData
    

