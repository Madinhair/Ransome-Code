# serialize key as PEM format from object
def serializeKey(key):
return key.public_bytes(encoding=serialization.Encoding.PEM,format=serialization.PublicFormat.SubjectPublicKeyInfo)

# load key object from given key in PEM format
def undoSerializeKey(key):
return serialization.load_pem_public_key(key,backend=default_backend())

# store a key in PEM format on a file on disk
# a password is required to store private key   
def storeKeyPEM(key,password,path=""):
if(not password):
    print("Error: Password is required to store private key")
    return -1
fname = 'private.pem'
pem = key.private_bytes(encoding=serialization.Encoding.PEM,format=serialization.PrivateFormat.PKCS8,encryption_algorithm=serialization.BestAvailableEncryption(password))
try:
    with open(path+"/"+fname,"w") as file:
        file.write(pem.decode())
except Exception as exc:
    print(exc)
    print("Error occurred while writing key on file")
    return -1

return 1

# load a private key from file
def loadKeyPEM(password=None,path=""):
    if(not password):
        print("Error: Password is required to store private key")
        return -1
    fname = 'private.pem'
    try:
        with open(path+"/"+fname, "rb") as key_file:
            key = serialization.load_pem_private_key(key_file.read(),password=password,backend=default_backend())
        key_file.close()        
    except Exception as exc:
        print(exc)
        return -1

    return key
